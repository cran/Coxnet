// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Coxnet.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// scaleC
List scaleC(Eigen::MatrixXd X);
static SEXP Coxnet_scaleC_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    __result = Rcpp::wrap(scaleC(X));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_scaleC(SEXP XSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_scaleC_try(XSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// OmegaC
List OmegaC(Eigen::MatrixXd& Omega, Eigen::VectorXi& sgn);
static SEXP Coxnet_OmegaC_try(SEXP OmegaSEXP, SEXP sgnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type sgn(sgnSEXP);
    __result = Rcpp::wrap(OmegaC(Omega, sgn));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_OmegaC(SEXP OmegaSEXP, SEXP sgnSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_OmegaC_try(OmegaSEXP, sgnSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// OmegaSC
List OmegaSC(Eigen::SparseMatrix<double>& OmegaS, Eigen::VectorXi& sgn);
static SEXP Coxnet_OmegaSC_try(SEXP OmegaSSEXP, SEXP sgnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type OmegaS(OmegaSSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type sgn(sgnSEXP);
    __result = Rcpp::wrap(OmegaSC(OmegaS, sgn));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_OmegaSC(SEXP OmegaSSEXP, SEXP sgnSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_OmegaSC_try(OmegaSSEXP, sgnSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// max_lambdaC
double max_lambdaC(Eigen::MatrixXd X, Eigen::VectorXd tevent, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, double alpha, Eigen::VectorXd wbeta, int N0);
static SEXP Coxnet_max_lambdaC_try(SEXP XSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP wbetaSEXP, SEXP N0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wbeta(wbetaSEXP);
    Rcpp::traits::input_parameter< int >::type N0(N0SEXP);
    __result = Rcpp::wrap(max_lambdaC(X, tevent, N, nevent, nevent1, loc1, n, alpha, wbeta, N0));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_max_lambdaC(SEXP XSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP wbetaSEXP, SEXP N0SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_max_lambdaC_try(XSEXP, teventSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, alphaSEXP, wbetaSEXP, N0SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// pletaCm
double pletaCm(Eigen::VectorXd& xb, Eigen::VectorXd& exb, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n, int& ifast, int& itwo);
static SEXP Coxnet_pletaCm_try(SEXP xbSEXP, SEXP exbSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP ifastSEXP, SEXP itwoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type exb(exbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int& >::type ifast(ifastSEXP);
    Rcpp::traits::input_parameter< int& >::type itwo(itwoSEXP);
    __result = Rcpp::wrap(pletaCm(xb, exb, nevent, nevent1, loc1, n, ifast, itwo));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_pletaCm(SEXP xbSEXP, SEXP exbSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP ifastSEXP, SEXP itwoSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_pletaCm_try(xbSEXP, exbSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, ifastSEXP, itwoSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cvtrimC
Eigen::VectorXd cvtrimC(Eigen::VectorXd beta, int nn, int nn2, Eigen::VectorXi loco, Eigen::MatrixXd XF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF, Eigen::MatrixXd X, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int ifast, int itwo);
static SEXP Coxnet_cvtrimC_try(SEXP betaSEXP, SEXP nnSEXP, SEXP nn2SEXP, SEXP locoSEXP, SEXP XFSEXP, SEXP NFSEXP, SEXP neventFSEXP, SEXP nevent1FSEXP, SEXP loc1FSEXP, SEXP nFSEXP, SEXP XSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP ifastSEXP, SEXP itwoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< int >::type nn2(nn2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loco(locoSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XF(XFSEXP);
    Rcpp::traits::input_parameter< int >::type NF(NFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type neventF(neventFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1F(nevent1FSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1F(loc1FSEXP);
    Rcpp::traits::input_parameter< int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ifast(ifastSEXP);
    Rcpp::traits::input_parameter< int >::type itwo(itwoSEXP);
    __result = Rcpp::wrap(cvtrimC(beta, nn, nn2, loco, XF, NF, neventF, nevent1F, loc1F, nF, X, N, nevent, nevent1, loc1, n, ifast, itwo));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_cvtrimC(SEXP betaSEXP, SEXP nnSEXP, SEXP nn2SEXP, SEXP locoSEXP, SEXP XFSEXP, SEXP NFSEXP, SEXP neventFSEXP, SEXP nevent1FSEXP, SEXP loc1FSEXP, SEXP nFSEXP, SEXP XSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP ifastSEXP, SEXP itwoSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_cvtrimC_try(betaSEXP, nnSEXP, nn2SEXP, locoSEXP, XFSEXP, NFSEXP, neventFSEXP, nevent1FSEXP, loc1FSEXP, nFSEXP, XSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, ifastSEXP, itwoSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// coxenetC
List coxenetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast);
static SEXP Coxnet_coxenetC_try(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wbeta(wbetaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type ifast(ifastSEXP);
    __result = Rcpp::wrap(coxenetC(X, tevent, alpha, lambda, nlambda, wbeta, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_coxenetC(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_coxenetC_try(XSEXP, teventSEXP, alphaSEXP, lambdaSEXP, nlambdaSEXP, wbetaSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, pSEXP, N0SEXP, threshSEXP, maxitSEXP, ifastSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cvcoxenetC
List cvcoxenetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast, Eigen::MatrixXd XF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF);
static SEXP Coxnet_cvcoxenetC_try(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP, SEXP XFSEXP, SEXP NFSEXP, SEXP neventFSEXP, SEXP nevent1FSEXP, SEXP loc1FSEXP, SEXP nFSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wbeta(wbetaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type ifast(ifastSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XF(XFSEXP);
    Rcpp::traits::input_parameter< int >::type NF(NFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type neventF(neventFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1F(nevent1FSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1F(loc1FSEXP);
    Rcpp::traits::input_parameter< int >::type nF(nFSEXP);
    __result = Rcpp::wrap(cvcoxenetC(X, tevent, alpha, lambda, nlambda, wbeta, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast, XF, NF, neventF, nevent1F, loc1F, nF));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_cvcoxenetC(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP, SEXP XFSEXP, SEXP NFSEXP, SEXP neventFSEXP, SEXP nevent1FSEXP, SEXP loc1FSEXP, SEXP nFSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_cvcoxenetC_try(XSEXP, teventSEXP, alphaSEXP, lambdaSEXP, nlambdaSEXP, wbetaSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, pSEXP, N0SEXP, threshSEXP, maxitSEXP, ifastSEXP, XFSEXP, NFSEXP, neventFSEXP, nevent1FSEXP, loc1FSEXP, nFSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// coxnetC
List coxnetC(Eigen::MatrixXd& X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::SparseMatrix<double>& Omega, Eigen::MatrixXd loc, Eigen::VectorXi nadj, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast);
static SEXP Coxnet_coxnetC_try(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP OmegaSEXP, SEXP locSEXP, SEXP nadjSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wbeta(wbetaSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type loc(locSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nadj(nadjSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type ifast(ifastSEXP);
    __result = Rcpp::wrap(coxnetC(X, tevent, alpha, lambda, nlambda, wbeta, Omega, loc, nadj, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_coxnetC(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP OmegaSEXP, SEXP locSEXP, SEXP nadjSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_coxnetC_try(XSEXP, teventSEXP, alphaSEXP, lambdaSEXP, nlambdaSEXP, wbetaSEXP, OmegaSEXP, locSEXP, nadjSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, pSEXP, N0SEXP, threshSEXP, maxitSEXP, ifastSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cvcoxnetC
List cvcoxnetC(Eigen::MatrixXd& X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::SparseMatrix<double>& Omega, Eigen::MatrixXd loc, Eigen::VectorXi nadj, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast, Eigen::MatrixXd XF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF);
static SEXP Coxnet_cvcoxnetC_try(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP OmegaSEXP, SEXP locSEXP, SEXP nadjSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP, SEXP XFSEXP, SEXP NFSEXP, SEXP neventFSEXP, SEXP nevent1FSEXP, SEXP loc1FSEXP, SEXP nFSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wbeta(wbetaSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type loc(locSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nadj(nadjSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type ifast(ifastSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XF(XFSEXP);
    Rcpp::traits::input_parameter< int >::type NF(NFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type neventF(neventFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type nevent1F(nevent1FSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type loc1F(loc1FSEXP);
    Rcpp::traits::input_parameter< int >::type nF(nFSEXP);
    __result = Rcpp::wrap(cvcoxnetC(X, tevent, alpha, lambda, nlambda, wbeta, Omega, loc, nadj, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast, XF, NF, neventF, nevent1F, loc1F, nF));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Coxnet_cvcoxnetC(SEXP XSEXP, SEXP teventSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP wbetaSEXP, SEXP OmegaSEXP, SEXP locSEXP, SEXP nadjSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP N0SEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP ifastSEXP, SEXP XFSEXP, SEXP NFSEXP, SEXP neventFSEXP, SEXP nevent1FSEXP, SEXP loc1FSEXP, SEXP nFSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Coxnet_cvcoxnetC_try(XSEXP, teventSEXP, alphaSEXP, lambdaSEXP, nlambdaSEXP, wbetaSEXP, OmegaSEXP, locSEXP, nadjSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP, pSEXP, N0SEXP, threshSEXP, maxitSEXP, ifastSEXP, XFSEXP, NFSEXP, neventFSEXP, nevent1FSEXP, loc1FSEXP, nFSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int Coxnet_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*scaleC)(Eigen::MatrixXd)");
        signatures.insert("List(*OmegaC)(Eigen::MatrixXd&,Eigen::VectorXi&)");
        signatures.insert("List(*OmegaSC)(Eigen::SparseMatrix<double>&,Eigen::VectorXi&)");
        signatures.insert("double(*max_lambdaC)(Eigen::MatrixXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,double,Eigen::VectorXd,int)");
        signatures.insert("double(*pletaCm)(Eigen::VectorXd&,Eigen::VectorXd&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&,int&,int&)");
        signatures.insert("Eigen::VectorXd(*cvtrimC)(Eigen::VectorXd,int,int,Eigen::VectorXi,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int)");
        signatures.insert("List(*coxenetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int)");
        signatures.insert("List(*cvcoxenetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
        signatures.insert("List(*coxnetC)(Eigen::MatrixXd&,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::SparseMatrix<double>&,Eigen::MatrixXd,Eigen::VectorXi,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int)");
        signatures.insert("List(*cvcoxnetC)(Eigen::MatrixXd&,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::SparseMatrix<double>&,Eigen::MatrixXd,Eigen::VectorXi,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP Coxnet_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Coxnet", "Coxnet_scaleC", (DL_FUNC)Coxnet_scaleC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_OmegaC", (DL_FUNC)Coxnet_OmegaC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_OmegaSC", (DL_FUNC)Coxnet_OmegaSC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_max_lambdaC", (DL_FUNC)Coxnet_max_lambdaC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_pletaCm", (DL_FUNC)Coxnet_pletaCm_try);
    R_RegisterCCallable("Coxnet", "Coxnet_cvtrimC", (DL_FUNC)Coxnet_cvtrimC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_coxenetC", (DL_FUNC)Coxnet_coxenetC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_cvcoxenetC", (DL_FUNC)Coxnet_cvcoxenetC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_coxnetC", (DL_FUNC)Coxnet_coxnetC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_cvcoxnetC", (DL_FUNC)Coxnet_cvcoxnetC_try);
    R_RegisterCCallable("Coxnet", "Coxnet_RcppExport_validate", (DL_FUNC)Coxnet_RcppExport_validate);
    return R_NilValue;
}
